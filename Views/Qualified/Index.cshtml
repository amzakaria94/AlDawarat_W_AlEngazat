@model IEnumerable<AlDawarat_W_AlEngazat.Models.Entities.Employee>

@{
    ViewData["Title"] = "الموظفين المؤهلين";
}

<h2 class="text-center"> المؤهلون</h2>

<!-- Search Form -->
<form method="get" class="mb-3">
    <div class="row">
        <!-- Department -->
        <div class="col-md-2">
            <label for="department">القسم:</label>
            <input type="text" id="department" name="department" class="form-control" autocomplete="off" placeholder="اكتب القسم..." value="@ViewBag.DepartmentQuery" />
            <div id="departmentSuggestions" class="dropdown-menu"></div>
        </div>
        <!-- Position -->
        <div class="col-md-2">
            <label for="position">التخصص:</label>
            <input type="text" id="position" name="position" class="form-control" autocomplete="off" placeholder="اكتب التخصص..." value="@ViewBag.PositionQuery" />
            <div id="positionSuggestions" class="dropdown-menu"></div>
        </div>

        <!-- Category -->
        <div class="col-md-2">
            <label for="category">فئة:</label>
            <select id="category" name="category" class="form-control">
                <option value="">الكل</option>
                @foreach (var category in ViewBag.Categories) {
                    <option value="@category" selected="@(ViewBag.SelectedCategory == category ? "selected" : null)">@category</option>
                }
            </select>
        </div>


        <button type="submit" class="btn btn-primary mt-3 col-1">بحث</button>
    </div>

</form>

@if (Model.Any()) {


    <!-- Qualification Filters -->
    <div id="qualificationFilter" class="d-flex mt-3 align-content-center justify-content-between" style="display: none;">
        <div class="col-md-4 d-flex align-items-center justify-content-start">
            <label class="me-4">التأهيل:</label>
            <div class="d-flex align-items-center">
                <div class="form-check me-3">
                    <input class="form-check-input qualification-radio" type="radio" name="qualificationFilter" value="مؤهل" selected="@(ViewBag.SelectedQualification == "مؤهل" ? "selected" : null)">
                    <label class="form-check-label">مؤهل </label>
                </div>
                <div class="form-check me-3">
                    <input class="form-check-input qualification-radio" type="radio" name="qualificationFilter" value="غير مؤهل" selected="@(ViewBag.SelectedQualification == "مؤهل" ? "selected" : null)">
                    <label class="form-check-label">غير مؤهل</label>
                </div>
            </div>
        </div>

        <!-- Display Number of Employees -->
        <div class="text-center mt-3">
            <p class="fw-bold fs-4">
                عدد : <span id="employeeCount" class="text-primary" style="cursor: pointer;">@Model.Count()</span>
            </p>
        </div>

        <!-- Display Percentage -->
        <div class="col-md-4 text-start align-content-center">
            <p class="fw-bold fs-4">
                النسبة :  <span id="percentageDisplay">0 %</span>
            </p>
        </div>
    </div>
    <div id="matchingEmployeeNumber" class="text-start fs-5 " style="display:none"></div>

    <!-- Employee Table -->
    <table id="employeeTable" class="table table-bordered mt-3" style="display: none;">
        <thead>
            <tr class="bg-gradient bg-secondary bg-opacity-50">
                <th>الاسم</th>
                <th>الرقم</th>
                <th>الفئة</th>
                <th>القسم</th>
                <th>التخصص</th>
                <th>المؤهل</th>
            </tr>
        </thead>
        <tbody id="employeeTable">
            @foreach (var employee in Model) {
                <tr data-certificate="@employee.Certificate">
                    <td>@employee.Name</td>
                    <td>@employee.Number</td>
                    <td>@employee.Category</td>
                    <td>@employee.Department</td>
                    <td>@employee.Position</td>
                    <td>@employee.Certificate</td>
                </tr>
            }
        </tbody>
    </table>
} else {
    <p class="text-center mt-3">لا يوجد نتائج مطابقة للبحث.</p>
}

<button id="drawChartBtn" class="btn btn-success mt-3">رسم بياني</button>
<div class="container d-flex justify-content-between">
    <div class="w-50">
        <canvas id="achievementChart" width="200" height="100" style="display:none;"></canvas>
    </div>
    <div class="w-25">
        <canvas id="achievementChartPie" width="25" height="25" style="display:none;"></canvas>
    </div>
</div>

<!-- JavaScript for Dynamic Filtering & Percentage Calculation -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
@section Scripts {

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var qualificationFilterDiv = document.getElementById("qualificationFilter")
            var percentageDisplay = document.getElementById("percentageDisplay")
            var rows = document.querySelectorAll("#employeeTable tr")
            var matchingEmployeeNumber = document.getElementById("matchingEmployeeNumber")
            var drawChartBtn = document.getElementById("drawChartBtn")
            var achievementChart = document.getElementById("achievementChart")
            var achievementChartPie = document.getElementById("achievementChartPie")

            if (window.barChartInstance) {
                window.barChartInstance.destroy()
            }
            if (window.pieChartInstance) {
                window.pieChartInstance.destroy()
            }


            function updatePercentage(selectedValue) {
                let totalEmployees = 0
                let matchingEmployees = 0

                rows.forEach(function (row) {
                    let certificate = row.getAttribute("data-certificate")
                    let isQualified = (certificate === "تأسيسة" || certificate === "متقدمة")
                    let isNotQualified = (certificate === "غير مؤهل")

                    // Count total employees
                    if (isQualified || isNotQualified) {
                        totalEmployees++
                    }

                    // Count matching employees based on the selected filter
                    if ((selectedValue === "مؤهل" && isQualified) ||
                        (selectedValue === "غير مؤهل" && isNotQualified)) {
                        matchingEmployees++
                    }
                })

                let percentage = totalEmployees > 0 ? Math.round((matchingEmployees / totalEmployees) * 100) : 0
                percentageDisplay.textContent = percentage + "%"
                matchingEmployeeNumber.innerText = "العدد :" + " " + matchingEmployees
                matchingEmployeeNumber.style.display = "block"
            }




            function drawCharts(matchingEmployees, nonMatchingEmployees) {
                if (window.barChartInstance) {
                    window.barChartInstance.destroy()
                }
                if (window.pieChartInstance) {
                    window.pieChartInstance.destroy()
                }

                var barChart = new Chart(achievementChart, {
                    type: 'bar',
                    data: {
                        labels: ['المؤهلون', 'غير المؤهلون'],
                        datasets: [{
                            label: "عدد الاشخاص",
                            data: [matchingEmployees, nonMatchingEmployees],
                            backgroundColor: ['#4CAF50', '#FF6384'],
                            borderWidth: 1,
                            barPercentage: 0.3,
                            categoryPercentage: 0.5
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                })

                var pieChart = new Chart(achievementChartPie, {
                    type: 'pie',
                    data: {
                        labels: ['المؤهلون', 'غير المؤهلون'],
                        datasets: [{
                            data: [matchingEmployees, nonMatchingEmployees],
                            backgroundColor: ['#4CAF50', '#FF6384']
                        }]
                    },
                    options: {
                        responsive: true
                    }
                })

                achievementChart.style.display = 'block'
                achievementChartPie.style.display = 'block'
            }

            // Handle qualification radio button filtering
            var radios = document.querySelectorAll(".qualification-radio")
            // console.log(radios)
            radios.forEach(function (radio) {
                radio.addEventListener("change", function () {
                    var selectedValue = this.value

                    rows.forEach(function (row) {
                        var certificate = row.getAttribute("data-certificate")

                        if (selectedValue === "مؤهل" && (certificate === "تأسيسة" || certificate === "متقدمة")) {
                            row.style.display = ""
                        } else if (selectedValue === "غير مؤهل" && certificate === "غير مؤهل") {
                            row.style.display = ""
                        } else {
                            row.style.display = "none"
                        }
                    })
                    // console.log(selectedValue);
                    updatePercentage(selectedValue)
                    updateChart(selectedValue)
                })
            })

            // Show employee table and percentage display when the employee count is clicked
            var employeeCount = document.getElementById("employeeCount")
            var employeeTable = document.getElementById("employeeTable")
            employeeCount.addEventListener("click", function () {
                if (employeeTable.style.display === "none" || employeeTable.style.display === "") {
                    employeeTable.style.display = "table"
                    qualificationFilterDiv.style.display = "block"
                } else {
                    employeeTable.style.display = "none"
                    qualificationFilterDiv.style.display = "none"
                }
            })

            // Handle department suggestions
            var departmentInput = document.getElementById("department")
            var departmentSuggestions = document.getElementById("departmentSuggestions")

            departmentInput.addEventListener("input", function () {
                var query = this.value

                if (query.length > 2) {
                    fetch(`/Qualified/GetDepartmentSuggestions?term=${query}`)
                        .then(response => response.json())
                        .then(data => {
                            departmentSuggestions.innerHTML = ""
                            data.forEach(function (item) {
                                var suggestionItem = document.createElement("a")
                                suggestionItem.classList.add("list-group-item", "list-group-item-action")
                                suggestionItem.textContent = item
                                suggestionItem.addEventListener("click", function () {
                                    departmentInput.value = item
                                    departmentSuggestions.innerHTML = ""
                                })
                                departmentSuggestions.appendChild(suggestionItem)
                            })
                        })
                } else {
                    departmentSuggestions.innerHTML = ""
                }
            })

            // Handle position suggestions
            var positionInput = document.getElementById("position")
            var positionSuggestions = document.getElementById("positionSuggestions")

            positionInput.addEventListener("input", function () {
                var query = this.value

                if (query.length > 2) {
                    fetch(`/Qualified/GetPositionSuggestions?term=${query}`)
                        .then(response => response.json())
                        .then(data => {
                            positionSuggestions.innerHTML = ""
                            data.forEach(function (item) {
                                var suggestionItem = document.createElement("a")
                                suggestionItem.classList.add("list-group-item", "list-group-item-action")
                                suggestionItem.textContent = item
                                suggestionItem.addEventListener("click", function () {
                                    positionInput.value = item
                                    positionSuggestions.innerHTML = ""
                                })
                                positionSuggestions.appendChild(suggestionItem)
                            })
                        })
                } else {
                    positionSuggestions.innerHTML = ""
                }
            })

            // Handle category selection
            var categorySelect = document.getElementById("category")
            categorySelect.addEventListener("change", function () {
                // Handle category change if needed
                console.log("Category selected: " + this.value)
            })

            function updateChart(selectedValue) {
                let totalQualified = 0
                let totalNotQualified = 0

                rows.forEach(function (row) {
                    let certificate = row.getAttribute("data-certificate")
                    if (certificate === "تأسيسة" || certificate === "متقدمة") {
                        totalQualified++
                    } else if (certificate === "غير مؤهل") {
                        totalNotQualified++
                    }
                })

                let totalEmployees = totalQualified + totalNotQualified
                let matchingEmployees = (selectedValue === "مؤهل") ? totalQualified : totalNotQualified

                let percentage = totalEmployees > 0 ? Math.round((matchingEmployees / totalEmployees) * 100) : 0
                percentageDisplay.textContent = percentage + "%"

                return [totalQualified, totalNotQualified, totalEmployees]
            }


            drawChartBtn.addEventListener("click", function () {
                achievementChart.style.display = "block"
                achievementChartPie.style.display = "block"
                var selectedValue = document.querySelector(".qualification-radio:checked")
                var [totalQualified, totalNotQualified, totalEmployees] = updateChart(selectedValue)
                if (selectedValue) {
                    drawCharts(totalQualified, totalNotQualified)
                } else {
                    updateChart("") // Update charts with all employees
                }



                // ✅ Always toggle chart visibility


            })
        });


    </script>


}
